//K. T. D. S. De Silva ---- University of Moratuwa 
// time testing of components
//---------------------------------------------------------------

#include <iostream>
#include <bits/stdc++.h> 
#include <stdint.h>
#include <fstream>
#include <cuda.h>
#include <cuda_runtime.h>
#include "ros/ros.h"
#include "sensor_msgs/PointCloud2.h"
#include <sensor_msgs/PointCloud.h>
#include <sensor_msgs/point_cloud_conversion.h>
#include <time.h>
#include <sensor_msgs/point_cloud2_iterator.h>
#include <string>
#include <cmath> 
#include "math.h"
#include <cstdlib>
#include <stdio.h>
#include <map>
#include <iterator>
#include <boost/lexical_cast.hpp>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Vector3.h>
#include "geometry_msgs/Quaternion.h"
#include <boost/unordered_map.hpp>

using namespace std; 

const int axis_length = 65536; // 2^16; 
const int half_axis_length = 32768; 
const float resolution = 0.05f; 	// Resolution of 5 cm
const float half_resolution = resolution/2; // the half of the resolution. this value is used in calculations  
const float max_sensor_radius = 3.00f; 	// scan data further than this modulus value will not be considered. 

void generate_node_arrays(int size, float* x, float* y, float* z, float* x_camera_array, float* y_camera_array, float* z_camera_array, 
    uint8_t *r, uint8_t *g, uint8_t *b, 
    uint64_t* morton_code, uint32_t* rgb_result, uint64_t* free_morton_code, 
	float x_trans, float y_trans, float z_trans, double sin_a, double sin_b, double sin_g, double cos_a, double cos_b, double cos_g){
	
	int steps = max_sensor_radius/resolution; 
	for(int i=0; i<size; i++){ 
            
        // mark free space 
        float x1 = 0.025f, y1 = 0.025f, z1 = 0.025f; //this is the starting point of all 
        float x2 = x_camera_array[i], y2 = y_camera_array[i], z2 = z_camera_array[i];   // this is the end point for free scans 

        if( (fabs(x[i]) < max_sensor_radius) and (fabs(y[i]) < max_sensor_radius) and (fabs(z[i]) < max_sensor_radius)){
            x2 = x[i]; 
            y2 = y[i];
            z2 = z[i]; 
            
            float x_tm = x[i]*cos_a*cos_b + y[i]*cos_a*sin_b*sin_g - y[i]*sin_a*cos_g + z[i]*cos_a*sin_b*cos_g + z[i]*sin_a*sin_g + x_trans;  
            float y_tm = x[i]*sin_a*cos_b + y[i]*sin_a*sin_b*sin_g + y[i]*cos_a*cos_g + z[i]*sin_a*sin_b*cos_g - z[i]*cos_a*sin_g + y_trans; 
            float z_tm = x[i]*sin_b*-1 + y[i]*cos_b*sin_g + z[i]*cos_b*cos_g + z_trans; 
            
            // convert the float into an unsigned integer 
            uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
            uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
            uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );

            // x_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
            uint64_t x_temp = (x_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
            // x_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
            x_temp = ((x_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | x_temp; 
            // x_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
            x_temp = ((x_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
            x_temp = ((x_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
            x_temp = ((x_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
            x_temp = ((x_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
            x_temp = ((x_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
            x_temp = ((x_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
            x_temp = ((x_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
            x_temp = ((x_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
            x_temp = ((x_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
            x_temp = ((x_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
            x_temp = ((x_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
            x_temp = ((x_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
            x_temp = ((x_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
            x_temp = ((x_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | x_temp;
            // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
            x_temp = (x_temp>>2); 

            uint64_t m_code = x_temp; 

            // y_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
            uint64_t y_temp = (y_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
            // y_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
            y_temp = ((y_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | y_temp; 
            // y_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
            y_temp = ((y_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
            y_temp = ((y_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
            y_temp = ((y_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
            y_temp = ((y_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
            y_temp = ((y_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
            y_temp = ((y_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
            y_temp = ((y_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
            y_temp = ((y_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
            y_temp = ((y_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
            y_temp = ((y_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
            y_temp = ((y_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
            y_temp = ((y_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
            y_temp = ((y_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
            y_temp = ((y_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | y_temp;
            // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
            y_temp = (y_temp>>1); 

            m_code = (m_code | y_temp); 

            // z_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
            uint64_t z_temp = (z_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
            // z_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
            z_temp = ((z_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | z_temp; 
            // z_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
            z_temp = ((z_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
            z_temp = ((z_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
            z_temp = ((z_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
            z_temp = ((z_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
            z_temp = ((z_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
            z_temp = ((z_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
            z_temp = ((z_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
            z_temp = ((z_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
            z_temp = ((z_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
            z_temp = ((z_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
            z_temp = ((z_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
            z_temp = ((z_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
            z_temp = ((z_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
            z_temp = ((z_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | z_temp;
            // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
            
            m_code = (m_code | z_temp); 
            
            morton_code[i] = m_code; 

            // calculate rgbo value. 
            uint32_t r_temp = r[i] & 0b00000000000000000000000011111111; 
            uint32_t g_temp = g[i] & 0b00000000000000000000000011111111; 
            uint32_t b_temp = b[i] & 0b00000000000000000000000011111111; 
            uint32_t rgb_code = (r_temp<<24) | (g_temp<<16) | (b_temp<<8) | 0b00000000000000000000000000010001; // occ for obstcale nodes 
            rgb_result[i] = rgb_code; 

        }else{
            morton_code[i] = 0b0000000000000000100011011011011011011011011011011011011011011011; // index for mid point of environment.  
            rgb_result[i] = 0b00000000000000000000000000000000;   
        }
                    
        // start ray casting 

        float dx = abs(x2 - x1);
        float dy = abs(y2 - y1); 
        float dz = abs(z2 - z1);
        
        float xs = -1*resolution;
        float ys = -1*resolution;
        float zs = -1*resolution;
        
        if (x2 > x1) { xs = resolution; }    
        if (y2 > y1) { ys = resolution; } 
        if (z2 > z1) { zs = resolution; }

        if (dx >= dy and dx >= dz){
            // X is the driving axis
            //std::cout<<"X is driving axis"; 
            
            float py = 2 * dy - dx; 
            float pz = 2 * dz - dx;
            int sub_index = 0; 
            while (abs(x1-x2)>resolution/2 && (sub_index < steps)){
                
                x1 += xs; 
                if (py >= 0){ 
                    y1 += ys; 
                    py -= 2 * dx; 
                }
                if (pz >= 0){
                    z1 += zs; 
                    pz -= 2 * dx; 
                }
                py += 2 * dy; 
                pz += 2 * dz; 
                
                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                
                // x_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t x_temp = (x_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // x_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | x_temp; 
                // x_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                x_temp = ((x_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                x_temp = ((x_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                x_temp = ((x_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                x_temp = ((x_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                x_temp = ((x_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                x_temp = ((x_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                x_temp = ((x_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                x_temp = ((x_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                x_temp = ((x_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                x_temp = ((x_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                x_temp = ((x_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                x_temp = (x_temp>>2); 

                uint64_t m_code = x_temp; 

                // y_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t y_temp = (y_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // y_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | y_temp; 
                // y_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                y_temp = ((y_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                y_temp = ((y_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                y_temp = ((y_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                y_temp = ((y_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                y_temp = ((y_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                y_temp = ((y_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                y_temp = ((y_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                y_temp = ((y_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                y_temp = ((y_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                y_temp = ((y_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                y_temp = ((y_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                y_temp = (y_temp>>1); 

                m_code = (m_code | y_temp); 

                // z_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t z_temp = (z_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // z_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | z_temp; 
                // z_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                z_temp = ((z_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                z_temp = ((z_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                z_temp = ((z_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                z_temp = ((z_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                z_temp = ((z_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                z_temp = ((z_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                z_temp = ((z_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                z_temp = ((z_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                z_temp = ((z_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                z_temp = ((z_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                z_temp = ((z_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                
                m_code = (m_code | z_temp); 
                
                free_morton_code[i*steps + sub_index] = m_code;
                sub_index +=1; 
                
            }
            
            for(int j=sub_index; j<steps; j++){
                free_morton_code[i*steps + j] = 0b0000000000000000100011011011011011011011011011011011011011011011; 
            }
        }
        else if(dy >= dx and dy >= dz){
            // Y axis is the driving axis
            float px = 2 * dx - dy; 
            float pz = 2 * dz - dy; 
            int sub_index = 0;
            while (abs(y1-y2)>resolution/2 && (sub_index < steps)){ 
                //std::cout<<x1<<"\t"<<y1<<"\t"<<z1<<std::endl;
                y1 += ys; 
                if (px >= 0){ 
                    x1 += xs; 
                    px -= 2 * dy;
                }
                if (pz >= 0){ 
                    z1 += zs; 
                    pz -= 2 * dy;
                } 
                px += 2 * dx; 
                pz += 2 * dz;

                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                
                // x_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t x_temp = (x_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // x_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | x_temp; 
                // x_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                x_temp = ((x_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                x_temp = ((x_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                x_temp = ((x_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                x_temp = ((x_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                x_temp = ((x_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                x_temp = ((x_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                x_temp = ((x_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                x_temp = ((x_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                x_temp = ((x_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                x_temp = ((x_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                x_temp = ((x_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                x_temp = (x_temp>>2); 

                uint64_t m_code = x_temp; 

                // y_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t y_temp = (y_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // y_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | y_temp; 
                // y_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                y_temp = ((y_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                y_temp = ((y_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                y_temp = ((y_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                y_temp = ((y_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                y_temp = ((y_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                y_temp = ((y_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                y_temp = ((y_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                y_temp = ((y_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                y_temp = ((y_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                y_temp = ((y_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                y_temp = ((y_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                y_temp = (y_temp>>1); 

                m_code = (m_code | y_temp); 

                // z_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t z_temp = (z_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // z_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | z_temp; 
                // z_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                z_temp = ((z_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                z_temp = ((z_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                z_temp = ((z_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                z_temp = ((z_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                z_temp = ((z_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                z_temp = ((z_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                z_temp = ((z_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                z_temp = ((z_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                z_temp = ((z_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                z_temp = ((z_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                z_temp = ((z_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                
                m_code = (m_code | z_temp); 
                
                free_morton_code[i*steps + sub_index] = m_code;
                sub_index +=1; 
            }
            
            for(int j=sub_index; j<steps; j++){
                free_morton_code[i*steps + j] = 0b0000000000000000100011011011011011011011011011011011011011011011; 
            } 
        }
        else{
            // Z axis is the driving axis
            
            float py = 2*dy - dz;       // slope error 
            float px = 2*dx - dz; 
            int sub_index = 0;
            while(abs(z1-z2)>resolution/2 && (sub_index < steps)){
                //std::cout<<x1<<"\t"<<y1<<"\t"<<z1<<std::endl;
                z1 += zs; 
                if (py >= 0){ 
                    y1 += ys; 
                    py -= 2*dz; 
                }
                if (px >= 0){ 
                    x1 += xs ;
                    px -= 2*dz; 
                }
                py += 2*dy; 
                px += 2*dx; 
                
                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                
                // x_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t x_temp = (x_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // x_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | x_temp; 
                // x_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                x_temp = ((x_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                x_temp = ((x_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                x_temp = ((x_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                x_temp = ((x_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                x_temp = ((x_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                x_temp = ((x_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                x_temp = ((x_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                x_temp = ((x_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                x_temp = ((x_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                x_temp = ((x_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                x_temp = ((x_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                x_temp = ((x_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | x_temp;
                // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                x_temp = (x_temp>>2); 

                uint64_t m_code = x_temp; 

                // y_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t y_temp = (y_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // y_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | y_temp; 
                // y_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                y_temp = ((y_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                y_temp = ((y_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                y_temp = ((y_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                y_temp = ((y_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                y_temp = ((y_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                y_temp = ((y_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                y_temp = ((y_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                y_temp = ((y_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                y_temp = ((y_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                y_temp = ((y_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                y_temp = ((y_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                y_temp = ((y_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | y_temp;
                // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                y_temp = (y_temp>>1); 

                m_code = (m_code | y_temp); 

                // z_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
                uint64_t z_temp = (z_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
                // z_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | z_temp; 
                // z_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
                z_temp = ((z_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
                z_temp = ((z_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
                z_temp = ((z_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
                z_temp = ((z_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
                z_temp = ((z_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
                z_temp = ((z_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
                z_temp = ((z_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
                z_temp = ((z_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
                z_temp = ((z_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
                z_temp = ((z_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
                z_temp = ((z_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
                z_temp = ((z_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | z_temp;
                // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
                
                m_code = (m_code | z_temp); 
                
                free_morton_code[i*steps + sub_index] = m_code;
                sub_index +=1; 
            }
            
            for(int j=sub_index; j<steps; j++){
                free_morton_code[i*steps + j] = 0b0000000000000000100011011011011011011011011011011011011011011011; 
            } 
        }	           	
    }
}

inline uint64_t generate_morton_code(uint16_t x, uint16_t y, uint16_t z){
    uint64_t x_original = uint64_t(x);
    uint64_t y_original = uint64_t(y);
    uint64_t z_original = uint64_t(z);
    
    // x_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
    uint64_t x_temp = (x_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
    // x_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
    x_temp = ((x_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | x_temp; 
    // x_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
    x_temp = ((x_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
    x_temp = ((x_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
    x_temp = ((x_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
    x_temp = ((x_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
    x_temp = ((x_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
    x_temp = ((x_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
    x_temp = ((x_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
    x_temp = ((x_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
    x_temp = ((x_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
    x_temp = ((x_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
    x_temp = ((x_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
    x_temp = ((x_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
    x_temp = ((x_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
    x_temp = ((x_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | x_temp;
    // x_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
    x_temp = (x_temp>>2); 

    uint64_t m_code = x_temp; 

    // y_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
    uint64_t y_temp = (y_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
    // y_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
    y_temp = ((y_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | y_temp; 
    // y_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
    y_temp = ((y_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
    y_temp = ((y_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
    y_temp = ((y_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
    y_temp = ((y_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
    y_temp = ((y_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
    y_temp = ((y_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
    y_temp = ((y_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
    y_temp = ((y_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
    y_temp = ((y_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
    y_temp = ((y_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
    y_temp = ((y_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
    y_temp = ((y_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
    y_temp = ((y_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
    y_temp = ((y_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | y_temp;
    // y_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
    y_temp = (y_temp>>1); 

    m_code = (m_code | y_temp); 

    // z_oroginal = 0000000000000000 0000000000000000 0000000000000000 1111111111111111
    uint64_t z_temp = (z_original<<32) & (0b0000000000000000100000000000000000000000000000000000000000000000); 
    // z_temp = 0000000000000000 1000000000000000 0000000000000000 0000000000000000
    z_temp = ((z_original<<30) & (0b0000000000000000000100000000000000000000000000000000000000000000)) | z_temp; 
    // z_temp = 0000000000000000 1001000000000000 0000000000000000 0000000000000000
    z_temp = ((z_original<<28) & (0b0000000000000000000000100000000000000000000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001000000000 0000000000000000 0000000000000000
    z_temp = ((z_original<<26) & (0b0000000000000000000000000100000000000000000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001000000 0000000000000000 0000000000000000
    z_temp = ((z_original<<24) & (0b0000000000000000000000000000100000000000000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001000 0000000000000000 0000000000000000
    z_temp = ((z_original<<22) & (0b0000000000000000000000000000000100000000000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0000000000000000 0000000000000000
    z_temp = ((z_original<<20) & (0b0000000000000000000000000000000000100000000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010000000000000 0000000000000000
    z_temp = ((z_original<<18) & (0b0000000000000000000000000000000000000100000000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010000000000 0000000000000000
    z_temp = ((z_original<<16) & (0b0000000000000000000000000000000000000000100000000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010000000 0000000000000000
    z_temp = ((z_original<<14) & (0b0000000000000000000000000000000000000000000100000000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010000 0000000000000000
    z_temp = ((z_original<<12) & (0b0000000000000000000000000000000000000000000000100000000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0000000000000000
    z_temp = ((z_original<<10) & (0b0000000000000000000000000000000000000000000000000100000000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100000000000000
    z_temp = ((z_original<<8) &  (0b0000000000000000000000000000000000000000000000000000100000000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100000000000
    z_temp = ((z_original<<6) &  (0b0000000000000000000000000000000000000000000000000000000100000000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100000000
    z_temp = ((z_original<<4) &  (0b0000000000000000000000000000000000000000000000000000000000100000)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100000
    z_temp = ((z_original<<2) &  (0b0000000000000000000000000000000000000000000000000000000000000100)) | z_temp;
    // z_temp = 0000000000000000 1001001001001001 0010010010010010 0100100100100100
    
    m_code = (m_code | z_temp); 

    return m_code;
}

inline uint32_t create_node_value(uint8_t r, uint8_t g, uint8_t b, int8_t occ){
    //0-15 = free
    // 16  = unobserved
    // 17-32 - occupied 
    uint32_t r_temp = uint32_t(r); 
    uint32_t g_temp = uint32_t(g); 
    uint32_t b_temp = uint32_t(b); 
    uint32_t occ_temp = uint32_t(occ);
    uint32_t result = (r_temp<<24) | (g_temp<<16) | (b_temp<<8) | occ_temp; 
    return result; 
}

extern boost::unordered::unordered_map<uint64_t, uint32_t> octree;

float *x_end, *y_end, *z_end; // endpoints 
static bool setup_grid = false; 

int cudamain(sensor_msgs::PointCloud2 point_cloud_std, nav_msgs::Odometry odom_message_std){ 

    double starttotal, endtotal; 
	starttotal = clock();
    
	int array_size = 640*480; 	     
	// convert quaternion orientation into roll, pitch, yaw representation 
	double roll, pitch, yaw; 
	tf::Quaternion quat;
    tf::quaternionMsgToTF(odom_message_std.pose.pose.orientation, quat);	
    tf::Matrix3x3(quat).getRPY(roll, pitch, yaw);
	float x_trans = (float) odom_message_std.pose.pose.position.x; 
	float y_trans = (float) odom_message_std.pose.pose.position.y; 
	float z_trans = (float) odom_message_std.pose.pose.position.z; 

	double sin_g = sin(roll); 
	double sin_b = sin(pitch); 
	double sin_a = sin(yaw); 
	double cos_g = cos(roll); 
	double cos_b = cos(pitch); 
	double cos_a = cos(yaw); 

	int counter = 0; 
	int effective_point_count = 0; 
	//declare the arrray sets before reading the point cloud values 
	
	float *x, *y, *z; // for allocating position values of the points 
	uint8_t *r, *g, *b; // for color values of the point cloud 
    
	int size_position = array_size * sizeof(float);
	int size_color = array_size * sizeof(uint8_t);
    int max_step_count = max_sensor_radius/resolution; 
    int max_free_voxel_count = array_size * max_sensor_radius/resolution; 

	x = (float *)malloc( size_position );
   	y = (float *)malloc( size_position );
	z = (float *)malloc( size_position );

    r = (uint8_t *)malloc( size_color );
    g = (uint8_t *)malloc( size_color );
	b = (uint8_t *)malloc( size_color );
    
    
	
    //run this code once 
    if(!setup_grid){
        cout<<"setting up once"<<endl;
        x_end = (float *)malloc( size_position );
   	    y_end = (float *)malloc( size_position );
	    z_end = (float *)malloc( size_position );

        ifstream ifile;
        ifile.open ("free_endpoints.txt", ios::in);
        float x_map, y_map, z_map;  
        int i=0;   
        while(ifile >>x_map>>y_map>>z_map){
            x_end[i] = x_map; 
            y_end[i] = y_map;
            z_end[i] = z_map; 
            i+=1; 
        }
        ifile.close();
        setup_grid = true; // not to run this code again 
    }

    // positional data vector generation 
    double start1, end1; 
    start1 = clock();
	for(sensor_msgs::PointCloud2ConstIterator<float> it(point_cloud_std, "x"); it!=it.end(); ++it){
		y[counter] = it[0] * -1; 
		z[counter] = it[1] * -1;
		x[counter] = it[2];
		counter+=1;  
		
	}
	counter = 0; 
    for(sensor_msgs::PointCloud2ConstIterator<uint8_t> it_color(point_cloud_std, "rgb"); it_color!=it_color.end(); ++it_color){
		b[counter] = unsigned(it_color[0]);	
		g[counter] = unsigned(it_color[1]);	
		r[counter] = unsigned(it_color[2]); 
		counter+=1; 
	}
	counter = 0; 
	
    end1 = clock();
    double time1 = (double)(end1 - start1);
    
    uint16_t *x_rounded, *y_rounded, *z_rounded; 							// the intermediate results after rounding off the x, y, z, original values to the resolution 
	uint16_t *x_free, *y_free, *z_free; 
    int size_int_arr = array_size * sizeof(uint16_t);
    int size_free_int_arr = max_free_voxel_count * sizeof(uint16_t); 

    x_rounded = (uint16_t *)malloc( size_int_arr );
   	y_rounded = (uint16_t *)malloc( size_int_arr );
    z_rounded = (uint16_t *)malloc( size_int_arr );
    x_free = (uint16_t *)malloc( size_free_int_arr );
   	y_free = (uint16_t *)malloc( size_free_int_arr );
    z_free = (uint16_t *)malloc( size_free_int_arr );
    
	// linearize obstacle points ---------------------------------------------------------------------------------------------------------------
    double start2, end2; 
	start2 = clock();
    for(int i=0; i<array_size; i++){
        if( (fabs(x[i]) < max_sensor_radius) and (fabs(y[i]) < max_sensor_radius) and (fabs(z[i]) < max_sensor_radius)){
            
            // C: Transformation model 2 ---------- Roll, pitch, yaw combined--------- for inclined planes navigation --------------
            float x_temp = x[i]*cos_a*cos_b + y[i]*cos_a*sin_b*sin_g - y[i]*sin_a*cos_g + z[i]*cos_a*sin_b*cos_g + z[i]*sin_a*sin_g + x_trans;  
            float y_temp = x[i]*sin_a*cos_b + y[i]*sin_a*sin_b*sin_g + y[i]*cos_a*cos_g + z[i]*sin_a*sin_b*cos_g - z[i]*cos_a*sin_g + y_trans; 
            float z_temp = x[i]*sin_b*-1 + y[i]*cos_b*sin_g + z[i]*cos_b*cos_g + z_trans; 
            
            x_rounded[i] = uint16_t(half_axis_length + ceilf(x_temp / resolution) -1 );
            y_rounded[i] = uint16_t(half_axis_length + ceilf(y_temp / resolution) -1 );
            z_rounded[i] = uint16_t(half_axis_length + ceilf(z_temp / resolution) -1 );
            
        }else{
            x_rounded[i] = uint16_t(half_axis_length-1);
            y_rounded[i] = uint16_t(half_axis_length-1);
            z_rounded[i] = uint16_t(half_axis_length-1); 

        } 
    }
    end2 = clock();
	double time2 = (double)(end2 - start2);
    // ----------------------------------------------------------------------------------------------------------------------------------------------------

    // ray casting ----------------------------------------------------------------------------------------------------------------------------------------
    double start3, end3; 
    start3 = clock();
    
    int steps = max_sensor_radius/resolution; 
	for(int i=0; i<array_size; i++){ 
            
        // mark free space 
        float x1 = 0.025f, y1 = 0.025f, z1 = 0.025f; //this is the starting point of all 
        float x2 = x_end[i], y2 = y_end[i], z2 = z_end[i];   // this is the end point for free scans 

        if( (fabs(x[i]) < max_sensor_radius) and (fabs(y[i]) < max_sensor_radius) and (fabs(z[i]) < max_sensor_radius)){
            x2 = x[i]; 
            y2 = y[i];
            z2 = z[i];   
        }
        
        float dx = abs(x2 - x1);
        float dy = abs(y2 - y1); 
        float dz = abs(z2 - z1);
        
        float xs = -1*resolution;
        float ys = -1*resolution;
        float zs = -1*resolution;
        
        if (x2 > x1) { xs = resolution; }    
        if (y2 > y1) { ys = resolution; } 
        if (z2 > z1) { zs = resolution; }

        if (dx >= dy and dx >= dz){
            // X is the driving axis
            //std::cout<<"X is driving axis"; 
            
            float py = 2 * dy - dx; 
            float pz = 2 * dz - dx;
            int sub_index = 0; 
            while (abs(x1-x2)>resolution/2 && (sub_index < steps)){
                
                x1 += xs; 
                if (py >= 0){ 
                    y1 += ys; 
                    py -= 2 * dx; 
                }
                if (pz >= 0){
                    z1 += zs; 
                    pz -= 2 * dx; 
                }
                py += 2 * dy; 
                pz += 2 * dz; 
                
                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                         
                x_free[i*steps + sub_index] = x_original;
                y_free[i*steps + sub_index] = y_original;
                z_free[i*steps + sub_index] = z_original;
                sub_index +=1; 
                
            }
            
            for(int j=sub_index; j<steps; j++){
                x_free[i*steps + j] = uint16_t(half_axis_length-1); 
                y_free[i*steps + j] = uint16_t(half_axis_length-1); 
                z_free[i*steps + j] = uint16_t(half_axis_length-1); 
            }
        }
        else if(dy >= dx and dy >= dz){
            // Y axis is the driving axis
            float px = 2 * dx - dy; 
            float pz = 2 * dz - dy; 
            int sub_index = 0;
            while (abs(y1-y2)>resolution/2 && (sub_index < steps)){ 
                //std::cout<<x1<<"\t"<<y1<<"\t"<<z1<<std::endl;
                y1 += ys; 
                if (px >= 0){ 
                    x1 += xs; 
                    px -= 2 * dy;
                }
                if (pz >= 0){ 
                    z1 += zs; 
                    pz -= 2 * dy;
                } 
                px += 2 * dx; 
                pz += 2 * dz;

                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                
                
                x_free[i*steps + sub_index] = x_original;
                y_free[i*steps + sub_index] = y_original;
                z_free[i*steps + sub_index] = z_original;
                sub_index +=1;  
            }
            
            for(int j=sub_index; j<steps; j++){
                x_free[i*steps + j] = uint16_t(half_axis_length-1); 
                y_free[i*steps + j] = uint16_t(half_axis_length-1); 
                z_free[i*steps + j] = uint16_t(half_axis_length-1);
            } 
        }
        else{
            // Z axis is the driving axis
            
            float py = 2*dy - dz;       // slope error 
            float px = 2*dx - dz; 
            int sub_index = 0;
            while(abs(z1-z2)>resolution/2 && (sub_index < steps)){
                //std::cout<<x1<<"\t"<<y1<<"\t"<<z1<<std::endl;
                z1 += zs; 
                if (py >= 0){ 
                    y1 += ys; 
                    py -= 2*dz; 
                }
                if (px >= 0){ 
                    x1 += xs ;
                    px -= 2*dz; 
                }
                py += 2*dy; 
                px += 2*dx; 
                
                float x_tm = x1*cos_a*cos_b + y1*cos_a*sin_b*sin_g - y1*sin_a*cos_g + z1*cos_a*sin_b*cos_g + z1*sin_a*sin_g + x_trans;  
                float y_tm = x1*sin_a*cos_b + y1*sin_a*sin_b*sin_g + y1*cos_a*cos_g + z1*sin_a*sin_b*cos_g - z1*cos_a*sin_g + y_trans; 
                float z_tm = x1*sin_b*-1 + y1*cos_b*sin_g + z1*cos_b*cos_g + z_trans; 
                
                uint64_t x_original = uint64_t(half_axis_length + ceilf(x_tm / resolution) -1 );
                uint64_t y_original = uint64_t(half_axis_length + ceilf(y_tm / resolution) -1 );
                uint64_t z_original = uint64_t(half_axis_length + ceilf(z_tm / resolution) -1 );
                x_free[i*steps + sub_index] = x_original;
                y_free[i*steps + sub_index] = y_original;
                z_free[i*steps + sub_index] = z_original;
                sub_index +=1;
                
            }
            
            for(int j=sub_index; j<steps; j++){
                x_free[i*steps + j] = uint16_t(half_axis_length-1); 
                y_free[i*steps + j] = uint16_t(half_axis_length-1); 
                z_free[i*steps + j] = uint16_t(half_axis_length-1); 
            } 
        }	           	
    }

    end3 = clock();
    double time3 = (double)(end3 - start3);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    uint64_t *mcode_arr;  
    uint64_t *free_mcode_arr; 
    uint32_t *rgbo_arr;
    int size_free_array = max_free_voxel_count * sizeof(uint64_t); 
    int size_morton_array = array_size * sizeof(uint64_t);
    int size_rgbo = array_size * sizeof(uint32_t);
    mcode_arr = (uint64_t *)malloc( size_morton_array );
    rgbo_arr = (uint32_t *)malloc( size_rgbo );
    free_mcode_arr = (uint64_t *)malloc( size_free_array );

    //generate morton codes -----------------------------------------------------------------------------------------------------------------------------
    double start4, end4; 
    start4 = clock();
    for(int j=0; j<array_size; j++){
        mcode_arr[j] = generate_morton_code(x_rounded[j], y_rounded[j], z_rounded[j]); 
    }
    for(int j=0; j<max_free_voxel_count; j++){
        free_mcode_arr[j] = generate_morton_code(x_free[j], y_free[j], z_free[j]); 
    }
    end4 = clock();
    double time4 = (double)(end4 - start4);

    //------make colour values ---------------------------------------------------------------------------------------------------------------------------------

    double start5, end5; 
    start5 = clock();
    for(int j=0; j<array_size; j++){
        rgbo_arr[j] = create_node_value(r[j], g[j], b[j], 0b00010001); 
    }
    
    end5 = clock();
    double time5 = (double)(end5 - start5);

//---------------------------------------------------------------------------------------------------------------------------------------------------------
    // add into the octree 
    double start6, end6; 
    start6 = clock();

    for(int i=0; i<max_free_voxel_count; i+=max_step_count){
        for(int j=0; j<max_step_count-2; j++){
            int k = i+j; 
            //uint64_t morton_code = free_mcode_arr[k+1]; 
            if(free_mcode_arr[k+2] == 0b0000000000000000100011011011011011011011011011011011011011011011){ 
                break; 
            }else{
                uint64_t morton_code = free_mcode_arr[k];
                boost::unordered::unordered_map<uint64_t, uint32_t>::iterator itr;  // to find the key 
                itr = octree.find(morton_code);
                if (itr == octree.end()){
                    uint32_t value = 0b00000000000000000000000000001111;                // mark as free 
                    octree.insert(std::make_pair<uint64_t, uint32_t>(morton_code, value));
                    
                }else{
                    uint32_t rgbo_map = (itr->second); 
                    uint32_t occ_old = rgbo_map & 0b00000000000000000000000000111111;
                    rgbo_map = 0b00000000000000000000000000000000;             // this is the final variable 
                    if(occ_old == 0b00000000000000000000000000010001){  // previous value is 17, reducing one will make it unknown
                        rgbo_map = rgbo_map | 0b00000000000000000000000000001111; // so make it 15
                    }else if(occ_old > 0b00000000000000000000000000000000){
                        // value greater than 0. max free  
                        occ_old -=1; 
                        rgbo_map = rgbo_map | occ_old; 
                    }else{
                    }
                    itr->second = rgbo_map; 
                }
            }     
        }
    }	
    for(int i=0; i<array_size; i++){
        // Morton code for null points: 0b0000000000000000100011011011011011011011011011011011011011011011;
        uint64_t morton_code = mcode_arr[i]; 
        //search for the above code in octree
        if(morton_code != 0b0000000000000000100011011011011011011011011011011011011011011011){
            boost::unordered::unordered_map<uint64_t, uint32_t>::iterator itr;  // to find the key 
            itr = octree.find(morton_code);
            if (itr == octree.end()){
                uint32_t value = rgbo_arr[i]; 
                octree.insert(std::make_pair<uint64_t, uint32_t>(morton_code, value));
                
            }else{
                uint32_t rgbo_map = (itr->second); 
                uint32_t occ_old = rgbo_map & 0b00000000000000000000000000111111;
                rgbo_map = rgbo_arr[i] & 0b11111111111111111111111100000000;             // this is the final variable 
                
                if(occ_old == 0b00000000000000000000000000001100){  // previous value is 12, adding 3 will make it unknown 
                    rgbo_map = rgbo_map | 0b00000000000000000000000000010001; // so make it 17
                }else if(occ_old < 0b00000000000000000000000000100000){
                    // value less than 32. max occupancy 
                    occ_old +=4;                                        // obstacle nodes are more critical 
                    rgbo_map = rgbo_map | occ_old; 
                }else{
                    // no use from this case
                }
                itr->second = rgbo_map; 
            }
        }    
    }
    end6 = clock();
    double time6 = (double)(end6 - start6);
    
    free(x);
    free(y);
	free(z);
	free(r);
	free(g);
	free(b);
	free(mcode_arr); 
	free(free_mcode_arr); 
    free(rgbo_arr);
    free(x_rounded);
    free(y_rounded); 
    free(z_rounded); 
    free(x_free); ;
    free(y_free); 
    free(z_free);
    
    endtotal = clock();
	double timetotal = (double)(endtotal - starttotal);
    std::cout<<time1<<"\t"<<time2<<"\t"<<time3<<"\t"<<time4<<"\t"<<time5<<"\t"<<time6<<"\t"<<timetotal<<std::endl; 
	return EXIT_SUCCESS; 	
}
